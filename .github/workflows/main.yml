#---------------------Question 1: Who Am I
def WhoAmI():
    return('hz2870')


#--------------------Question 2: getBondPrice
# Version 1
# Bond price calculation
def getBondPrice_v1(y, face, couponRate, m, ppy=1):
    """
    Calculate the bond price based on input parameters.

    y: Yield or interest rate
    face: Face value of the bond
    couponRate: Annual coupon rate
    m: Number of years to maturity
    ppy: Payments per year (default: 1)
    """
    # Calculate coupon payment
    cf = couponRate * face / ppy
    # Total number of periods
    n = m * ppy
    # Yield per period
    y1 = y / ppy

    # Initialize present value of coupon payments
    pvcf = 0
    for t in range(1, n + 1):
        pvcf += cf / ((1 + y1) ** t)

    # Calculate present value of face value
    pv_f = face / ((1 + y1) ** n)

    # Calculate total bond price
    bondPrice = pvcf + pv_f

    return bondPrice



#--------------------Question 3: getBondDuration
# Version 1
def getBondDuration_v1(y, face, couponRate, m, ppy=1):
    couponPayment = face * couponRate
    pvcf = 0
    w_pvcf = 0
    for t in range(1, 1 + m):
        pv = 1 / (1 + y)**t
        cashFlow = couponPayment if t < m else couponPayment + face
        pvCashFlow = pv * cashFlow
        pvcf += pvCashFlow
        w_pvcf += pvCashFlow * t

    duration = w_pvcf / pvcf
    return duration

# Version 2
def getBondDuration_v2(y, face, couponRate, m, ppy=1):
    bondDuration = 0
    coupon = face * couponRate / ppy
    pvcf = 0
    pvcf_t = 0
    
    for i in range(1, m * ppy + 1):
        dcf = 1 / (1 + y / ppy) ** i
        cashflow = coupon if i < m * ppy else coupon + face
        pvcf += dcf * cashflow
        pvcf_t += i * dcf * cashflow

    bondDuration = pvcf_t / pvcf
    return bondDuration

# Test values
duration_v1 = getBondDuration_v1(y, face, couponRate, m, ppy)
duration_v2 = getBondDuration_v2(y, face, couponRate, m, ppy)


#--------------------Question 4: getBondPrice_Enumerate
# Version 1
def getBondPrice_E_v1(face, couponRate, m, yc):
    bondPrice = 0
    coupon = face * couponRate
    for t, y in enumerate(yc, start=1):
        pv_factor = 1 / (1 + y) ** t
        cashFlow = coupon if t < m else coupon + face
        bondPrice += cashFlow * pv_factor

    return bondPrice

# Version 2
def getBondPrice_E_v2(face, couponRate, m, yc):
    bondPrice = 0
    coupon = face * couponRate
    for a, b in enumerate(yc):
        cashflow = coupon if a < m - 1 else coupon + face
        dcf = 1 / (1 + b) ** (a + 1)
        bondPrice += dcf * cashflow
    return bondPrice

# Test values
yc = [0.010, 0.015, 0.020, 0.025, 0.030]
bondPrice_E_v1 = getBondPrice_E_v1(face, couponRate, m, yc)
bondPrice_E_v2 = getBondPrice_E_v2(face, couponRate, m, yc)


#--------------------Question 5: getBondPrice_Zip
# Version 1
def getBondPrice_Z_v1(face, couponRate, times, yc):
    cpn = couponRate * face
    bondPrice = 0
    for y, t in zip(yc, times):
        dfn = 1 / ((1 + y) ** t)
        bondPrice += dfn * cpn
    bondPrice += face * dfn
    return bondPrice

# Version 2
def getBondPrice_Z_v2(face, couponRate, times, yc):
    bondPrice = 0
    coupon = face * couponRate
    for a, b in zip(yc, times):
        cashflow = coupon if b != times[-1] else coupon + face
        dcf = 1 / (1 + a) ** b
        bondPrice += dcf * cashflow
    return bondPrice

# Test values
times = [1, 1.5, 3, 4, 7]
bondPrice_Z_v1 = getBondPrice_Z_v1(face, couponRate, times, yc)
bondPrice_Z_v2 = getBondPrice_Z_v2(face, couponRate, times, yc)


#--------------------Question 6: FizzBuzz
# Version 1
def FizzBuzz_v1(start, finish):
    outlist = []
    for i in range(start, finish + 1):
        if i % 3 == 0 and i % 5 == 0:
            outlist.append("fizzbuzz")
        elif i % 3 == 0:
            outlist.append("fizz")
        elif i % 5 == 0:
            outlist.append("buzz")
        else:
            outlist.append(i)
    return outlist

# Version 2
def FizzBuzz_v2(start, finish):
    out = []
    for i in range(start, finish + 1):
        if i % 15 == 0:
            out.append('FizzBuzz')
        elif i % 3 == 0:
            out.append('Fizz')
        elif i % 5 == 0:
            out.append('Buzz')
        else:
            out.append(i)
    return out

# Test values
fizzbuzz_v1 = FizzBuzz_v1(1, 15)
fizzbuzz_v2 = FizzBuzz_v2(1, 15)

(bondPrice_v1, bondPrice_v2, duration_v1, duration_v2, bondPrice_E_v1, bondPrice_E_v2, bondPrice_Z_v1, bondPrice_Z_v2, fizzbuzz_v1, fizzbuzz_v2)

